
provider "aws" {
    region = "{{ aws_region }}"
    }

#resource "aws_vpc" "vm_vpc" {
 #   cidr_block = "10.0.0.0/16"
  #  enable_dns_support = true
   # enable_dns_hostnames = true

    #tags = {
     #   Name = "vm-vpc"
   # }
#}
resource "aws_instance" "vm" {
    count = 2
    ami = "{{ ami_id }}"
    instance_type = "{{ instance_type }}"
    subnet_id = count.index == 0 ? data.aws_subnet.subnet1.id : data.aws_subnet.subnet2.id
    vpc_security_group_ids = [aws_security_group.vm_sg.id]
    tags = {
        Name = "vm-${count.index + 1}"
    }
    }

resource "aws_security_group" "vm_sg" {
    name = "vm_sg"
    description = "Security group for VM"
    vpc_id = "vpc-084687c42bc6b6be7"

    ingress {
        from_port = 22
        to_port = 22
        protocol = "tcp"
        cidr_blocks = ["0.0.0.0/0"]
        }

    ingress {
        from_port = 80
        to_port = 80
        protocol = "tcp"
        cidr_blocks = ["0.0.0.0/0"]
        }
}


#resource "aws_subnet" "public_sub" {
 ##   count = 2
  #  vpc_id = aws_vpc.vm_vpc.id
  #  cidr_block = "10.0.${count.index}.0/24"
  ##  availability_zone = "{{ availability_zone }}"
  #  map_public_ip_on_launch = true
  #  tags = {
  #      Name = "public-subnet-${count.index + 1}"
 #   }
#}

data "aws_subnet" "subnet1" {
  id = "subnet-0caaa6ff3c583ca10"
}

data "aws_subnet" "subnet2" {
  id = "subnet-0dba81b888eb03998"
}

resource "aws_lb" "vm_lb" {
    name = "{{ lb_name }}"
    internal = false
    load_balancer_type = "application"
    security_groups = [aws_security_group.vm_sg.id]
    subnets = [data.aws_subnet.subnet1.id, data.aws_subnet.subnet2.id]
    enable_deletion_protection = false

    tags = {
        Name = "vm-lb"
    }
}

resource "aws_lb_target_group" "vm_tg" {
    name = "{{ tg_name }}"
    port = 80
    protocol = "HTTP"
    vpc_id = "vpc-084687c42bc6b6be7"

    tags = {
        Name = "vm-tg"
    }
}

resource "aws_lb_listener" "vm_listener" {
    load_balancer_arn = aws_lb.vm_lb.arn
    port = 80
    protocol = "HTTP"

    default_action {
        type = "forward"
        target_group_arn = aws_lb_target_group.vm_tg.arn
    }
}

resource "aws_lb_target_group_attachment" "vm_tg_attachment" {
    count = 2
    target_group_arn = aws_lb_target_group.vm_tg.arn
    target_id = aws_instance.vm[count.index].id
    port = 80
}

data "aws_internet_gateway" "existing" {
  filter {
    name   = "attachment.vpc-id"
    values = ["vpc-084687c42bc6b6be7"]
  }
}

resource "aws_route_table" "vm_rt" {
    vpc_id = "vpc-084687c42bc6b6be7"
    route {
        cidr_block = "0.0.0.0/0"
        gateway_id = data.aws_internet_gateway.existing.id
    }
}

#resource "aws_route_table_association" "vm_rta" {
   # count = 2
   # subnet_id = count.index == 0 ? data.aws_subnet.subnet1.id : data.aws_subnet.subnet2.id
   # route_table_id = aws_route_table.vm_rt.id

#}

resource "null_resource" "waiting_for_vm_ip" {
    provisioner "local-exec" {
    command = <<EOT
      interval=30
      times=5
      for i in $(seq 1 $${times}); do
          if [ -z "${aws_instance.vm[0].public_ip}" ]; then
              echo "Waiting for VM to get public IP..."
              sleep $${interval}
          else
              exit 0
          fi
      done
      echo "ERROR: couldn't find associated public IP for VM"
      exit 1
    EOT
  }

  depends_on = [aws_instance.vm]
    }

locals {
  vm_ip_after_wait = [for instance in aws_instance.vm : instance.public_ip]
  _enforce_dep     = null_resource.waiting_for_vm_ip.id
}


output "vm_public_ip" {
    value = local.vm_ip_after_wait
    description = "Public IP of the VM"
}

output "vm_id" {
    value = [for instance in aws_instance.vm : instance.id]
    description = "ID of the VM"
}

output "lb_dns_name" {
    value = aws_lb.vm_lb.dns_name
    description = "DNS name of the Load Balancer"
}
